---

  KeystoneBasic.create_user:
    -
      args:
        name_length: 10
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      sla:
        failure_rate:
          max: 0

  KeystoneBasic.create_delete_user:
    -
      args:
        name_length: 10
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      sla:
        failure_rate:
          max: 0

  KeystoneBasic.create_and_list_tenants:
    -
      args:
        name_length: 10
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      sla:
        failure_rate:
          max: 0

  KeystoneBasic.create_and_list_users:
    -
      args:
        name_length: 10
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      sla:
        failure_rate:
          max: 0

  KeystoneBasic.create_tenant:
    -
      args:
        name_length: 10
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      sla:
        failure_rate:
          max: 0

  KeystoneBasic.create_tenant_with_users:
    -
      args:
        name_length: 10
        users_per_tenant: 10
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      context:
        users:
          tenants: 3
      sla:
        failure_rate:
          max: 0

  KeystoneBasic.create_delete_user:
    -
      args:
        name_length: 10
      runner:
        type: "constant"
        times: 10
        concurrency: 10
      sla:
        failure_rate:
          max: 0

  HeatStacks.list_stacks_and_resources:
    -
      runner:
        type: "constant"
        times: 6
        concurrency: 3
      context:
        users:
          tenants: 2
          users_per_tenant: 3
        stacks:
          stacks_per_tenant: 2
          resources_per_stack: 10
      sla:
        failure_rate:
          max: 0

  Authenticate.keystone:
    -
      runner:
        type: "constant"
        times: 40
        concurrency: 20
      context:
        users:
          tenants: 2
          users_per_tenant: 10
      sla:
        failure_rate:
          max: 0

  Authenticate.validate_cinder:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: 10
        concurrency: 5
      context:
        users:
          tenants: 3
          users_per_tenant: 5
      sla:
        failure_rate:
          max: 0

  Authenticate.validate_glance:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: 10
        concurrency: 5
      context:
        users:
          tenants: 3
          users_per_tenant: 5
      sla:
        failure_rate:
          max: 0

  Authenticate.validate_nova:
    -
      args:
        repetitions: 2
      runner:
        type: "constant"
        times: 10
        concurrency: 5
      context:
        users:
          tenants: 3
          users_per_tenant: 5
      sla:
        failure_rate:
          max: 0

  Quotas.cinder_update_and_delete:
    -
      args:
        max_quota: 1024
      runner:
        type: "constant"
        times: 4
        concurrency: 1
      context:
        users:
          tenants: 3
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  Quotas.cinder_update:
    -
      args:
        max_quota: 1024
      runner:
        type: "constant"
        times: 10
        concurrency: 2
      context:
        users:
          tenants: 3
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  Quotas.nova_update_and_delete:
    -
      args:
        max_quota: 1024
      runner:
        type: "constant"
        times: 4
        concurrency: 1
      context:
        users:
          tenants: 3
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  Quotas.nova_update:
    -
      args:
        max_quota: 1024
      runner:
        type: "constant"
        times: 10
        concurrency: 2
      context:
        users:
          tenants: 3
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  GlanceImages.create_and_delete_image:
    -
      args:
        image_location: "/root/cirros-0.3.2-x86_64-disk.img"
        container_format: "bare"
        disk_format: "qcow2"
      runner:
        type: "constant"
        times: 5
        concurrency: 5
      context:
        users:
          tenants: 2
          users_per_tenant: 3
      sla:
        failure_rate:
          max: 0

  GlanceImages.create_image_and_boot_instances:
    -
      args:
        image_location: "/root/cirros-0.3.2-x86_64-disk.img"
        container_format: "bare"
        disk_format: "qcow2"
        flavor:
            name: "m1.tiny"
        number_instances: 2
      runner:
        type: "constant"
        times: 3
        concurrency: 3
      context:
        users:
          tenants: 3
          users_per_tenant: 1
      sla:
        failure_rate:
          max: 0

  NovaServers.boot_and_list_server:
    -
      args:
        flavor:
            name: "m1.tiny"
        image:
            name: ^debian.*$
        detailed: True
      runner:
        type: "constant"
        times: 3
        concurrency: 3
      context:
        users:
          tenants: 3
          users_per_tenant: 1
      sla:
        failure_rate:
          max: 0

  NovaServers.list_servers:
    -
      args:
        detailed: True
      runner:
        type: "constant"
        times: 3
        concurrency: 3
      context:
        users:
          tenants: 3
          users_per_tenant: 1
        servers:
          flavor:
              name: "m1.small"
          image:
              name: ^debian.*$
          servers_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  NovaServers.boot_and_bounce_server:
    -
      args:
        flavor:
            name: "m1.tiny"
        image:
            name: ^debian.*$
        actions:
          -
            hard_reboot: 1
          -
            stop_start: 1
          -
            rescue_unrescue: 1
      runner:
        type: "constant"
        times: 2
        concurrency: 2
      context:
        users:
          tenants: 2
          users_per_tenant: 1
      sla:
        failure_rate:
          max: 0



  NovaServers.snapshot_server:
    -
      args:
        flavor:
            name: "m1.tiny"
        image:
            name: ^debian-wheezy-amd64.*$
      runner:
        type: "constant"
        times: 2
        concurrency: 2
      context:
        users:
          tenants: 2
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  NovaServers.boot_server:
    -
      args:
        flavor:
            name: "^ram64$"
        image:
            name: ^debian.*$
        auto_assign_nics: false
      runner:
        type: "constant"
        times: 3
        concurrency: 3
      context:
        users:
          tenants: 3
          users_per_tenant: 2
        flavors:
          -
            name: "ram64"
            ram: 64
      sla:
        failure_rate:
          max: 0
    -
      args:
        flavor:
            name: "m1.tiny"
        image:
            name: ^debian-wheezy-amd64.*$
      runner:
        type: "constant"
        times: 3
        concurrency: 3
      context:
        users:
          tenants: 3
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  Requests.check_response:
    -
      args:
          url: "http://www.google.com"
          response: 200
      runner:
        type: "constant"
        times: 5
        concurrency: 5


  NovaSecGroup.boot_and_delete_server_with_secgroups:
    -
      args:
        flavor:
          name: "m1.tiny"
        image:
          name: ^debian-wheezy-amd64.*$
        security_group_count: 5
        rules_per_security_group: 5
      runner:
        type: "constant"
        times: 4
        concurrency: 4
      context:
        users:
          tenants: 3
          users_per_tenant: 2
        network:
          start_cidr: "10.2.0.0/24"
        quotas:
          nova:
            security_groups: -1
            security_group_rules: -1


  NovaKeypair.create_and_delete_keypair:
    -
      runner:
        type: "constant"
        times: 4
        concurrency: 4
      context:
        users:
          tenants: 3
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0


  NovaKeypair.create_and_list_keypairs:
    -
      runner:
        type: "constant"
        times: 4
        concurrency: 4
      context:
        users:
          tenants: 3
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0


  CinderVolumes.create_and_delete_volume:
    -
      args:
        size: 1
      runner:
        type: "constant"
        times: 3
        concurrency: 3
      context:
        users:
          tenants: 2
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  CinderVolumes.create_and_list_volume:
    -
      args:
        size: 1
        detailed: True
      runner:
        type: "constant"
        times: 3
        concurrency: 3
      context:
        users:
          tenants: 1
          users_per_tenant: 1
      sla:
        failure_rate:
          max: 0

  CinderVolumes.list_volumes:
    -
      args:
        detailed: True
      runner:
        type: "constant"
        times: 3
        concurrency: 3
      context:
        users:
          tenants: 2
          users_per_tenant: 1
        volumes:
          size: 1
          volumes_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  CinderVolumes.create_volume:
    -
      args:
        size: 1
      runner:
        type: "constant"
        times: 2
        concurrency: 2
      context:
        users:
          tenants: 2
          users_per_tenant: 2
      sla:
        failure_rate:
          max: 0

  CinderVolumes.create_and_extend_volume:
    -
      args:
        size: 1
        new_size: 2
      runner:
        type: "constant"
        times: 2
        concurrency: 2
      context:
        users:
          tenants: 1
          users_per_tenant: 1
      sla:
        failure_rate:
          max: 0

  CinderVolumes.create_from_volume_and_delete_volume:
    -
      args:
        size: 1
      runner:
        type: "constant"
        times: 2
        concurrency: 2
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        volumes:
          size: 1
      sla:
        failure_rate:
          max: 0

  CinderVolumes.create_and_delete_snapshot:
    -
      args:
        force: false
      runner:
        type: "constant"
        times: 3
        concurrency: 3
      context:
        users:
          tenants: 2
          users_per_tenant: 2
        volumes:
          size: 1
      sla:
        failure_rate:
          max: 0

  CinderVolumes.create_and_list_snapshots:
    -
      args:
        force: False
        detailed: True
      runner:
        type: "constant"
        times: 2
        concurrency: 2
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        volumes:
          size: 1
      sla:
        failure_rate:
          max: 0


  NeutronNetworks.create_and_list_networks:
    -
      args:
        network_create_args:
      runner:
        type: "constant"
        times: 40
        concurrency: 20
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
             network: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_list_subnets:
    -
      args:
        network_create_args:
        subnet_create_args:
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: 2
      runner:
        type: "constant"
        times: 30
        concurrency: 30
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
             network: -1
             subnet: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_list_routers:
    -
      args:
        network_create_args:
        subnet_create_args:
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: 2
        router_create_args:
      runner:
        type: "constant"
        times: 15
        concurrency: 15
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
             network: -1
             subnet: -1
             router: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_list_ports:
    -
      args:
        network_create_args:
        port_create_args:
        ports_per_network: 4
      runner:
        type: "constant"
        times: 20
        concurrency: 20
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
             network: -1
             subnet: -1
             router: -1
             port: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_update_networks:
    -
      args:
        network_create_args: {}
        network_update_args:
            admin_state_up: False
            name: "_updated"
      runner:
        type: "constant"
        times: 10
        concurrency: 5
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
            network: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_update_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.4.0.0/16"
        subnets_per_network: 2
        subnet_update_args:
            enable_dhcp: False
            name: "_subnet_updated"
      runner:
        type: "constant"
        times: 10
        concurrency: 5
      context:
        users:
          tenants: 5
          users_per_tenant: 5
        quotas:
          neutron:
            network: -1
            subnet: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_update_routers:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: 2
        router_create_args: {}
        router_update_args:
            admin_state_up: False
            name: "_router_updated"
      runner:
        type: "constant"
        times: 5
        concurrency: 5
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
            network: -1
            subnet: -1
            router: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_update_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: 5
        port_update_args:
            admin_state_up: False
            device_id: "dummy_id"
            device_owner: "dummy_owner"
            name: "_port_updated"
      runner:
        type: "constant"
        times: 10
        concurrency: 5
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
            network: -1
            port: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_delete_networks:
    -
      args:
        network_create_args: {}
      runner:
        type: "constant"
        times: 40
        concurrency: 20
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
            network: -1
            subnet: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_delete_subnets:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: 2
      runner:
        type: "constant"
        times: 40
        concurrency: 20
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
            network: -1
            subnet: -1
      sla:
        failure_rate:
          max: 0

  NeutronNetworks.create_and_delete_routers:
    -
      args:
        network_create_args: {}
        subnet_create_args: {}
        subnet_cidr_start: "1.1.0.0/30"
        subnets_per_network: 2
        router_create_args: {}
      runner:
        type: "constant"
        times: 30
        concurrency: 10
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
            network: -1
            subnet: -1
            router: -1
      sla:
          failure_rate:
            max: 0

  NeutronNetworks.create_and_delete_ports:
    -
      args:
        network_create_args: {}
        port_create_args: {}
        ports_per_network: 10
      runner:
        type: "constant"
        times: 15
        concurrency: 15
      context:
        users:
          tenants: 1
          users_per_tenant: 1
        quotas:
          neutron:
            network: -1
            port: -1
      sla:
        failure_rate:
          max: 0


